// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTranslationCard = `-- name: CreateTranslationCard :one
INSERT INTO translation_cards (
    english, meaning, translated, set_id, language, creator_id
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, created_at, english, meaning, translated, set_id, language, creator_id
`

type CreateTranslationCardParams struct {
	English    string      `json:"english"`
	Meaning    string      `json:"meaning"`
	Translated string      `json:"translated"`
	SetID      int64       `json:"set_id"`
	Language   string      `json:"language"`
	CreatorID  pgtype.UUID `json:"creator_id"`
}

func (q *Queries) CreateTranslationCard(ctx context.Context, arg CreateTranslationCardParams) (TranslationCard, error) {
	row := q.db.QueryRow(ctx, createTranslationCard,
		arg.English,
		arg.Meaning,
		arg.Translated,
		arg.SetID,
		arg.Language,
		arg.CreatorID,
	)
	var i TranslationCard
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.English,
		&i.Meaning,
		&i.Translated,
		&i.SetID,
		&i.Language,
		&i.CreatorID,
	)
	return i, err
}

const retrieveTranslationCardsForSet = `-- name: RetrieveTranslationCardsForSet :many

SELECT tc.id, tc.creator_id, tc.english, tc.meaning, tc.translated, tc.created_at, tc.set_id, tc.language
FROM translation_cards tc
JOIN
    Sets s ON tc.set_id = s.id
JOIN Users u ON tc.creator_id = u.uuid
WHERE
    tc.set_id = $1 AND tc.creator_id = $2
ORDER BY tc.created_at
`

type RetrieveTranslationCardsForSetParams struct {
	SetID     int64       `json:"set_id"`
	CreatorID pgtype.UUID `json:"creator_id"`
}

type RetrieveTranslationCardsForSetRow struct {
	ID         int64              `json:"id"`
	CreatorID  pgtype.UUID        `json:"creator_id"`
	English    string             `json:"english"`
	Meaning    string             `json:"meaning"`
	Translated string             `json:"translated"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	SetID      int64              `json:"set_id"`
	Language   string             `json:"language"`
}

// TranslationCards --
func (q *Queries) RetrieveTranslationCardsForSet(ctx context.Context, arg RetrieveTranslationCardsForSetParams) ([]RetrieveTranslationCardsForSetRow, error) {
	rows, err := q.db.Query(ctx, retrieveTranslationCardsForSet, arg.SetID, arg.CreatorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RetrieveTranslationCardsForSetRow
	for rows.Next() {
		var i RetrieveTranslationCardsForSetRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.English,
			&i.Meaning,
			&i.Translated,
			&i.CreatedAt,
			&i.SetID,
			&i.Language,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
